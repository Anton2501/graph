{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["graphData","дата","данные1","данные2","App","className","ResponsiveContainer","width","height","id","AreaChart","data","margin","left","top","right","XAxis","dataKey","tick","x","y","payload","style","fontSize","fill","textAnchor","value","tickLine","axisLine","Tooltip","Area","type","stroke","fillOpacity","dot","strokeWidth","r","activeDot","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAIMA,G,OAAY,CACd,CACIC,2BAAM,MACNC,wCAAU,GACVC,wCAAS,IAEb,CACIF,2BAAM,MACNC,wCAAS,GACTC,wCAAS,IAEb,CACIF,2BAAM,MACNC,wCAAS,GACTC,wCAAS,IAEb,CACIF,2BAAM,OACNC,wCAAS,GACTC,wCAAS,GAEb,CACIF,2BAAM,MACNC,wCAAS,EACTC,wCAAS,IAEb,CACIF,2BAAM,MACNC,wCAAS,GACTC,wCAAS,IAEb,CACIF,2BAAM,MACNC,wCAAS,GACTC,wCAAS,KAEb,CACIF,2BAAM,MACNC,yCAAU,GACVC,wCAAS,IAEb,CACIF,2BAAM,MACNC,wCAAS,GACTC,wCAAS,IAEb,CACIF,2BAAM,MACNC,wCAAS,GACTC,wCAAS,IAEb,CACIF,2BAAM,MACNC,wCAAS,GACTC,wCAAS,MA+EFC,MA3Ef,WAYI,OACI,qBAAKC,UAAU,MAAf,SACI,qBAAKA,UAAU,OAAf,SACI,qBAAKA,UAAU,mBAAf,SACI,cAACC,EAAA,EAAD,CAAqBC,MAAO,IAAKC,OAAQ,IAAKC,GAAG,MAAjD,SACI,eAACC,EAAA,EAAD,CAAWH,MAAO,IAAKC,OAAQ,IAAKG,KAAMX,EAAWY,OAAQ,CAAEC,KAAM,GAAIC,IAAK,GAAIC,MAAO,IAAzF,UAUI,cAACC,EAAA,EAAD,CAAOC,QAAQ,2BAAOC,KA1BjB,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAGC,EAAT,EAASA,QAAT,OACzB,sBACIF,EAAGA,EACHC,EAAGA,EAAI,GACPE,MAAO,CAAEC,SAAU,OAAQC,KAAM,WACjCC,WAAW,SAJf,SAMKJ,EAAQK,SAmByDC,UAAU,EAAOC,UAAU,IAC7E,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACIC,KAAK,WACLd,QAAQ,wCACRe,OAAO,UACPC,YAAa,EACbT,KAAK,gBACLU,IAAK,CACDF,OAAQ,UACRG,YAAa,EACbC,EAAG,EACHZ,KAAM,QAEVa,UAAW,CACPL,OAAQ,OACRG,YAAa,EACbC,EAAG,EACHZ,KAAM,aAGd,cAACM,EAAA,EAAD,CACIC,KAAK,WACLd,QAAQ,wCACRe,OAAO,SACPC,YAAa,EACbT,KAAK,gBACLU,IAAK,CACDF,OAAQ,MACRG,YAAa,EACbC,EAAG,EACHZ,KAAM,QAEVa,UAAW,CACPL,OAAQ,OACRG,YAAa,EACbC,EAAG,EACHZ,KAAM,2BClH3Bc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.15afe30e.chunk.js","sourcesContent":["import React from 'react';\nimport { AreaChart, Area, XAxis, Tooltip, ResponsiveContainer } from 'recharts';\nimport './App.css';\n\nconst graphData = [\n    {\n        дата: 'JAN',\n        данные1 : 97,\n        данные2: 15,\n    },\n    {\n        дата: 'FEB',\n        данные1: 83,\n        данные2: 16,\n    },\n    {\n        дата: 'MAR',\n        данные1: 15,\n        данные2: 40,\n    },\n    {\n        дата: 'APRL',\n        данные1: 32,\n        данные2: 9,\n    },\n    {\n        дата: 'MAY',\n        данные1: 4,\n        данные2: 23,\n    },\n    {\n        дата: 'JUN',\n        данные1: 42,\n        данные2: 35,\n    },\n    {\n        дата: 'JUL',\n        данные1: 30,\n        данные2: 105,\n    },\n    {\n        дата: 'AUG',\n        данные1: -40,\n        данные2: 90,\n    },\n    {\n        дата: 'SEP',\n        данные1: 30,\n        данные2: 72,\n    },\n    {\n        дата: 'NOV',\n        данные1: 30,\n        данные2: 12,\n    },\n    {\n        дата: 'DEC',\n        данные1: 30,\n        данные2: 47,\n    },\n];\n\nfunction App() {\n    const renderCustomAxisTick = ({ x, y, payload }) => (\n        <text\n            x={x}\n            y={y + 20}\n            style={{ fontSize: '12px', fill: '#909090' }}\n            textAnchor=\"middle\"\n        >\n            {payload.value}\n        </text>\n    );\n\n    return (\n        <div className=\"App\">\n            <div className=\"wrap\">\n                <div className=\"views-statistics\">\n                    <ResponsiveContainer width={900} height={200} id=\"123\">\n                        <AreaChart width={674} height={200} data={graphData} margin={{ left: 20, top: 10, right: 20 }}>\n                            {/* <defs>\n                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                    <stop offset=\"5%\" stopColor=\"#cfe1f5\" stopOpacity={1} />\n                                    <stop offset=\"95%\" stopColor=\"#cfe1f5\" stopOpacity={0.1} />\n                                </linearGradient>\n                            </defs>\n                            <defs>\n                                <rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" fill=\"red\" />\n                            </defs> */}\n                            <XAxis dataKey=\"дата\" tick={renderCustomAxisTick} tickLine={false} axisLine={false} />\n                            <Tooltip />\n                            <Area\n                                type=\"monotone\"\n                                dataKey=\"данные1\"\n                                stroke=\"#3377bb\"\n                                fillOpacity={1}\n                                fill=\"url(#colorUv)\"\n                                dot={{\n                                    stroke: '#3377bb',\n                                    strokeWidth: 2,\n                                    r: 3,\n                                    fill: '#fff',\n                                }}\n                                activeDot={{\n                                    stroke: '#fff',\n                                    strokeWidth: 2,\n                                    r: 5,\n                                    fill: '#3377bb',\n                                }}\n                            />\n                            <Area\n                                type=\"monotone\"\n                                dataKey=\"данные2\"\n                                stroke=\"tomato\"\n                                fillOpacity={1}\n                                fill=\"url(#colorUv)\"\n                                dot={{\n                                    stroke: 'red',\n                                    strokeWidth: 2,\n                                    r: 3,\n                                    fill: '#fff',\n                                }}\n                                activeDot={{\n                                    stroke: '#fff',\n                                    strokeWidth: 2,\n                                    r: 5,\n                                    fill: 'orangered',\n                                }}\n                            />\n                        </AreaChart>\n                    </ResponsiveContainer>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}