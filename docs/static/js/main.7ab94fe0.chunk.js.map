{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["graphData","дата","данные1","данные2","App","isMobile","test","navigator","userAgent","document","documentElement","clientWidth","window","innerWidth","className","ResponsiveContainer","width","height","id","LineChart","data","margin","left","top","right","XAxis","dataKey","tick","x","y","payload","style","fontSize","fill","textAnchor","value","tickLine","axisLine","Tooltip","Line","type","stroke","fillOpacity","dot","strokeWidth","r","activeDot","LabelList","position","content","fontWeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7ab94fe0.chunk.js","sourcesContent":["import React from 'react';\nimport {XAxis, Tooltip, ResponsiveContainer, LabelList, LineChart, Line } from 'recharts';\nimport './App.css';\n\nconst graphData = [\n    {\n        дата: 'JAN',\n        данные1 : 9700,\n        данные2: 1500,\n    },\n    {\n        дата: 'FEB',\n        данные1: 8300,\n        данные2: 1600,\n    },\n    {\n        дата: 'MAR',\n        данные1: 1500,\n        данные2: 4000,\n    },\n    {\n        дата: 'APR',\n        данные1: 3200,\n        данные2: 900,\n    },\n    {\n        дата: 'MAY',\n        данные1: 400,\n        данные2: 2300,\n    },\n    {\n        дата: 'JUN',\n        данные1: 4200,\n        данные2: 3500,\n    },\n    {\n        дата: 'JUL',\n        данные1: 3000,\n        данные2: 10000,\n    },\n    {\n        дата: 'AUG',\n        данные1: -2000,\n        данные2: 9000,\n    },\n    {\n        дата: 'SEP',\n        данные1: 2100,\n        данные2: 7200,\n    },\n    {\n        дата: 'NOV',\n        данные1: 3800,\n        данные2: 1200,\n    },\n    {\n        дата: 'DEC',\n        данные1: 3000,\n        данные2: 4700,\n    },\n];\n\nfunction App() {\n    const renderCustomAxisTick = ({ x, y, payload }) => {\n        return (\n            <text\n                x={x}\n                y={y + 20}\n                style={{ fontSize: '12px', fill: '#909090' }}\n                textAnchor=\"middle\"\n            >\n                {payload.value}\n            </text>\n        )\n    };\n\n    const renderRedAreaData = ({ x, y, value }) => (\n        <text\n            x={x}\n            y={y - 10}\n            style={{ fontSize: '14px', fill: 'red', fontWeight: 'bold' }}\n            textAnchor=\"middle\"\n        >\n            {value}\n        </text>\n    );\n\n    const renderGreenAreaData = ({ x, y, value }) => (\n        <text\n            x={x}\n            y={y - 10}\n            style={{ fontSize: '14px', fill: 'rgb(113, 204, 81)', fontWeight: 'bold' }}\n            textAnchor=\"middle\"\n        >\n            {value}\n        </text>\n    );\n\n    const isSafari = () => /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\n    const windowWidth = isSafari() ? document.documentElement.clientWidth : window.innerWidth;\n\n    const isMobile = windowWidth < 1160;\n\n    return (\n        <div className=\"App\">\n            <div className=\"wrap\">\n                <div className=\"views-statistics\">\n                    <ResponsiveContainer width={isMobile ? 900 : '100%'} height={400} id=\"123\">\n                        <LineChart\n                            width={674}\n                            height={400}\n                            data={graphData}\n                            margin={{ left: 20, top: 10, right: 20 }}\n                        >\n                            <XAxis dataKey=\"дата\" tick={renderCustomAxisTick} tickLine={false} axisLine={false} />\n                            <Tooltip />\n                            <Line\n                                type=\"monotone\"\n                                dataKey=\"данные2\"\n                                stroke=\"rgb(113, 204, 81)\"\n                                fillOpacity={1}\n                                fill=\"transparent\"\n                                dot={{\n                                    stroke: 'rgb(113, 204, 81)',\n                                    strokeWidth: 2,\n                                    r: 3,\n                                    fill: '#fff',\n                                }}\n                                activeDot={{\n                                    stroke: '#fff',\n                                    strokeWidth: 2,\n                                    r: 5,\n                                    fill: 'rgb(113, 204, 81)',\n                                }}\n                                strokeWidth={4}\n                            >\n                                <LabelList dataKey=\"данные2\" position=\"top\" content={renderGreenAreaData} />\n                            </Line>\n                            <Line\n                                type=\"monotone\"\n                                dataKey=\"данные1\"\n                                stroke=\"red\"\n                                fillOpacity={1}\n                                fill=\"transparent\"\n                                dot={{\n                                    stroke: 'red',\n                                    strokeWidth: 2,\n                                    r: 3,\n                                    fill: '#fff',\n                                }}\n                                activeDot={{\n                                    stroke: '#fff',\n                                    strokeWidth: 2,\n                                    r: 5,\n                                    fill: 'orangered',\n                                }}\n                                strokeWidth={4}\n                            >\n                                <LabelList dataKey=\"данные1\" position=\"top\" content={renderRedAreaData} />\n                            </Line>\n                        </LineChart>\n                    </ResponsiveContainer>\n                </div>\n                {isMobile && <div className=\"plug\" />}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}